    

BatchDetailsModal.tsx   

PondUseStatsDisplay.tsx


PondUseStatsTable.tsx

    import React, { useEffect, useState, useCallback } from "react";
    import {
    Box,
    Drawer,
    Divider,
    Typography,
    Button,
    Grid,
    CircularProgress,
    Alert,
    } from "@mui/material";
    import { useDispatch, useSelector } from "react-redux";
    import { AppDispatch, RootState } from "../../store";
    import {
    fetchNetUseStats,
    selectNetUseStats,
    selectNetUseStatsLoading,
    selectNetUseStatsError,
    } from "../../features/bsf/netUseStatsSlice";
    import { fetchBsfPondsUseStats } from "../../features/bsf/bsfPondsSlice";
    import { PondUseStatsDisplay } from "./batchFiles/PondUseStatsDisplay";
    import { NetUseStatsTable } from "./batchFiles/NetUseStatsTable";
    import { PondUseStatsTable } from "./batchFiles/PondUseStatsTable";
    import { AssociatedMediaContainer } from "./batchFiles/AssociatedMediaContainer";
    import { PondAssociatedMediaContainer } from "./batchFiles/PondAssociatedMediaContainer";

    interface BatchDetailsModalProps {
    open: boolean;
    batch: any | null;
    onClose: () => void;
    companyId: number;
    farmId: number;
    }

    const BatchDetailsModal: React.FC<BatchDetailsModalProps> = ({
    open,
    batch,
    onClose,
    companyId,
    farmId,
    }) => {
    const dispatch = useDispatch<AppDispatch>();

    const netUseStats = useSelector(selectNetUseStats);
    const loading = useSelector(selectNetUseStatsLoading);
    const error = useSelector(selectNetUseStatsError);
    const pondUseStats = useSelector((state: RootState) => state.bsfPonds.data);

    const [selectedOption, setSelectedOption] = useState<string>("Laying");
    const [selectedNet, setSelectedNet] = useState<{
        netusestats: any;
        associated_media: any[];
    } | null>(null);
    const [selectedPond, setSelectedPond] = useState<{
        pondusestats: any;
        associated_media: any[];
    } | null>(null);

    useEffect(() => {
        if (selectedOption === "Laying" && batch?.id) {
        dispatch(fetchNetUseStats({ companyId, farmId, batchId: batch.id }));
        } else if (batch?.id) {
        dispatch(
            fetchBsfPondsUseStats({
            company: companyId,
            farm: farmId,
            batch: batch.id,
            harvest_stage: selectedOption,
            })
        );
        }
    }, [selectedOption, batch, companyId, farmId, dispatch]);

    const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const { value } = event.target;
        setSelectedOption(value);
        setSelectedNet(null); // Reset selectedNet
        setSelectedPond(null); // Reset selectedPond
    };
    
    

    return (
        <Drawer anchor="right" open={open} onClose={onClose}>
        <Box sx={{ width: 600, padding: 2 }} role="presentation">
            <Box display="flex" justifyContent="space-between" alignItems="center">
            <Typography variant="h5" gutterBottom>
                {batch?.batch_name || "Batch Details"}
            </Typography>
            <Button variant="text" color="primary" onClick={onClose}>
                Close
            </Button>
            </Box>
            <Divider />
            <Grid container spacing={2} sx={{ mt: 2 }}>
            <Grid item xs={3} id="BatchInfoContainer">
                <PondUseStatsDisplay
                selectedOption={selectedOption}
                setSelectedOption={handleRadioChange}
                batch={batch}
                companyId={companyId}
                farmId={farmId}
                />
            </Grid>

            <Grid item xs={9} id="NetUseStatsTableContainer">
                {selectedOption === "Laying" ? (
                loading ? (
                    <CircularProgress />
                ) : error ? (
                    <Alert severity="error">{error}</Alert>
                ) : (
                    <NetUseStatsTable
                    netUseStats={netUseStats}
                    setSelectedNet={setSelectedNet}
                    companyId={companyId}
                    farmId={farmId}
                    batchId={batch?.id}
                    />
                )
                ) : (
                <PondUseStatsTable
                    pondUseStats={pondUseStats}
                    setSelectedPond={setSelectedPond}
                />
                )}
            </Grid>
            </Grid>
            <Divider sx={{ mt: 2, mb: 2 }} />

            {selectedOption === "Laying" ? (
            <AssociatedMediaContainer selectedNet={selectedNet} />
            ) : (
            <PondAssociatedMediaContainer selectedPond={selectedPond} />
            )}
        </Box>
        </Drawer>
    );
    };

    export default BatchDetailsModal;


    import React, { useEffect } from "react";
    import {
    FormControl,
    RadioGroup,
    FormControlLabel,
    Radio,
    Box,
    Tooltip,
    Button,
    } from "@mui/material";
    import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
    import { AppDispatch } from "../../../store";
    import { useDispatch } from "react-redux";
    import { fetchBsfPondsUseStats } from "../../../features/bsf/bsfPondsSlice";

    interface PondUseStatsDisplayProps {
    selectedOption: string;
    setSelectedOption: (event: React.ChangeEvent<HTMLInputElement>) => void; // Adjusted type
    batch: any | null;
    companyId: number;
    farmId: number;
    }


    export const PondUseStatsDisplay: React.FC<PondUseStatsDisplayProps> = ({
    selectedOption,
    setSelectedOption,
    batch,
    companyId,
    farmId,
    }) => {
    const dispatch = useDispatch<AppDispatch>();

    useEffect(() => {
        if (selectedOption !== "Laying" && batch?.id) {
        dispatch(
            fetchBsfPondsUseStats({
            company: companyId,
            farm: farmId,
            batch: batch.id,
            harvest_stage: selectedOption,
            })
        );
        }
    }, [dispatch, selectedOption, companyId, farmId, batch]);

    /*
    const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setSelectedOption(event.target.value);
    };
    */

    return (
        <FormControl component="fieldset">
        <RadioGroup value={selectedOption} onChange={setSelectedOption}>
            <FormControlLabel value="Laying" control={<Radio />} label="Laying" />
            <FormControlLabel value="Incubation" control={<Radio />} label="Incubation" />
            <FormControlLabel value="Nursery" control={<Radio />} label="Nursery" />
            <FormControlLabel value="Growout" control={<Radio />} label="Grow Out" />
            <FormControlLabel value="PrePupa" control={<Radio />} label="PrePupa" />
            <FormControlLabel value="Pupa" control={<Radio />} label="Pupa" />
        </RadioGroup>


        <Box sx={{ mt: 2, textAlign: "center" }}>
            <Tooltip title="Add new laying data for this batch">
            <Button
                id="addNewLayInfoButton"
                variant="contained"
                color="primary"
                startIcon={<AddCircleOutlineIcon />}
            >
                Add
            </Button>
            </Tooltip>
        </Box>
        </FormControl>
    );
    };


    import React from "react";
    import {
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    } from "@mui/material";
    import VideocamIcon from "@mui/icons-material/Videocam";
    import VideocamOffIcon from "@mui/icons-material/VideocamOff";

    interface PondUseStatsTableProps {
    pondUseStats: any[]; // Ensure this matches your data type
    setSelectedPond: React.Dispatch<
        React.SetStateAction<{
        pondusestats: any;
        associated_media: any[];
        } | null>
    >;
    }

    export const PondUseStatsTable: React.FC<PondUseStatsTableProps> = ({
    pondUseStats,
    setSelectedPond,
    }) => {
    const handleRowClick = (pond: any) => {
        setSelectedPond(pond);
    };

    return (
        <TableContainer sx={{ maxHeight: 250, overflowY: "auto" }}>
        <Table>
            <TableHead>
            <TableRow>
                <TableCell>Pond Name</TableCell>
                <TableCell>Start Date</TableCell>
                <TableCell>Associated Media</TableCell>
                <TableCell>Status</TableCell>
            </TableRow>
            </TableHead>
            <TableBody>
            {pondUseStats.map((pond: any) => (
                <TableRow
                key={pond.pondusestats.id}
                sx={{ cursor: "pointer" }}
                onClick={() => handleRowClick(pond)}
                >
                <TableCell>{pond.pondusestats.pond_name}</TableCell>
                <TableCell>{pond.pondusestats.start_date}</TableCell>
                <TableCell>
                    {pond.associated_media?.length > 0 ? (
                    <VideocamIcon sx={{ fontSize: 20, color: "green" }} />
                    ) : (
                    <VideocamOffIcon sx={{ fontSize: 20, color: "gray" }} />
                    )}
                </TableCell>
                <TableCell>{pond.pondusestats.status}</TableCell>
                </TableRow>
            ))}
            </TableBody>
        </Table>
        </TableContainer>
    );
    };
