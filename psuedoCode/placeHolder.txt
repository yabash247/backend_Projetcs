1. Make the modal scrollable in the y axis.
                2. Make modal appropriately sized while retaining the original structure

                
  TaskSlice.ts
    getMyTask thunk : get all task associated with user using : {{Backend_Localhost}}/api/company/tasks/

    bsf>NetInUse>Laying_Start.ts : 
        netUseStatsSlice


  Pseudocode for ViewCompanyView

      DEFINE class ViewCompanyView(APIView):
          SET permission_classes to [IsAuthenticated]

          DEFINE GET method(request, *args, **kwargs):
              FETCH `Company-ID` from request headers
              
              IF `Company-ID` exists:
                  // Handle single company retrieval
                  FETCH company using `get_object_or_404` with `Company-ID`
                  
                  CHECK if user has_permission using utils function `has_permission`:
                      IF NOT, raise PermissionDenied
                  
                  FETCH associated media for the company using `get_associated_media`
                  
                  SERIALIZE company data using `CompanySerializer`
                  SERIALIZE media data using `MediaSerializer`

                  RETURN Response with:
                      - Serialized company data
                      - Serialized media data
              
              ELSE:
                  // Handle multiple companies retrieval
                  IF user is superuser:
                      FETCH all companies
                  ELSE:
                      FETCH companies where the user is the creator
                  
                  INITIALIZE an empty list `companies_data`
                  
                  FOR EACH company in the fetched companies:
                      FETCH associated media for the company using `get_associated_media`
                      SERIALIZE company data using `CompanySerializer`
                      SERIALIZE media data using `MediaSerializer`
                      
                      APPEND to `companies_data`:
                          - Serialized company data
                          - Serialized media data
                  
                  RETURN Response with:
                      - `companies_data` list

      ---

      ### Key Components in Pseudocode

      1. **Single Company Logic**:
        - Check if `Company-ID` is provided.
        - Fetch the company object and associated media.
        - Serialize the data and return it.

      2. **Multiple Companies Logic**:
        - If `Company-ID` is not provided, fetch all companies accessible to the user.
        - Iterate over each company, fetch associated media, and serialize both.

      3. **Utility Function**:
        - Use `get_associated_media` to fetch media associated with each company.

      4. **Permissions**:
        - Ensure only authorized users can view company details and associated media.

      5. **Response Structure**:
        - Single company: Return company and its media.
        - Multiple companies: Return a list of companies, each with its media.



            
            
            {
                "taskId": 7, //task.id
                "appName": "bsf ", //task.appName
                "modelName": "netUseStats", //task.modelName
                "company" : 5,
                "farm": 8,
                "batch": AA1110,
                "status" : "ongoing",

                //net_{$index} option to add more nets or remove nets in form
                "net_1":[
                    "netId": 1 ,
                    "lay_start": "2024-27-27T22:52:56.683265Z",
                    //Media is dynamic {eg: media_title_$index}
                    "media":[
                        "media_title_0" = "Net 1 Lay_Start 1",
                        "medial_file_0" = "C:\Users\uprin\OneDrive\Documents\BIZ\FISH FARMING\VIDEOS\2023\APRIL\UBox_2023-04-12_060102_3_107_.mp4",
                        "medial_comment_0" = " ",
                        "media_title_1" = "Net 1 Lay_Start 2 ",
                        "medial_file_1" = "C:\Users\uprin\OneDrive\Documents\BIZ\FISH FARMING\VIDEOS\2023\APRIL\UBox_2023-04-12_070422_3_107_.mp4",
                        "medial_comment_1" = " ",
                        "media_title_2" = " ",
                        "medial_file_2" = "Net 1 Lay_Start 3 ",
                        "medial_comment_2" = " ",
                    ],
                ],

                "net_2":[
                    "netId": 2,
                    "lay_start": "2024-28-27T22:52:56.683265Z",
                    "media":[
                        "media_title_0" = "Net 2 Lay_Start 1 ",
                        "medial_file_0" = "C:\Users\uprin\OneDrive\Documents\BIZ\FISH FARMING\VIDEOS\2023\APRIL\UBox_2023-04-21_133551_3_107_.mp4",
                        "medial_comment_0" = " ",
                        "media_title_1" = "Net 2 Lay_Start 2 ",
                        "medial_file_1" = "C:\Users\uprin\OneDrive\Documents\BIZ\FISH FARMING\VIDEOS\2023\APRIL\UBox_2023-04-15_211043_3_107_.mp4",
                        "medial_comment_1" = " ",
                    ],
                ],
                "net_1":[
                    "netId": 3,
                    "lay_start": "2024-26-27T22:52:56.683265Z" ,
                    "media":[
                        "media_title_0" = "Net 3 Lay_Start 1 ",
                        "medial_file_0" = "C:\Users\uprin\OneDrive\Documents\BIZ\FISH FARMING\VIDEOS\2023\APRIL\UBox_2023-04-10_002309_3_107_.mp4",
                        "medial_comment_0" = "Net 3 Lay_Start 1 ",
                        "media_title_1" = "Net 3 Lay_Start 2 ",
                        "medial_file_1" = "C:\Users\uprin\OneDrive\Documents\BIZ\FISH FARMING\VIDEOS\2023\APRIL\UBox_2023-04-09_182446_3_107_.mp4",
                        "medial_comment_1" = "Net 3 Lay_Start 2 ",
                        "media_title_2" = "Net 3 Lay_Start 3 ",
                        "medial_file_2" = "C:\Users\uprin\OneDrive\Documents\BIZ\FISH FARMING\VIDEOS\2023\APRIL\UBox_2023-04-15_052753_3_107_.mp4",
                        "medial_comment_2" = "Net 3 Lay_Start 3 ",
                        "media_title_3" = "Net 3 Lay_Start 4 ",
                        "medial_file_3" = "C:\Users\uprin\OneDrive\Documents\BIZ\FISH FARMING\VIDEOS\2023\APRIL\UBox_2023-04-15_044536_3_107_.mp4",
                        "medial_comment_3" = "Net 3 Lay_Start 4 ",
                    ],
                ],

            }



            Requirements: 
                create a names for Forms that include 
                i. appName
                ii. modelName
                iii. activityname
                iiii. tablename
                iiiii. bsfname
                
            
            
            
            make the following additions to class TaskListCreateView(generics.ListCreateAPIView) :

                1. If company is provided in param:  
                    a. Ensure company exist
                    b. If branch is provided in param : 
                        i. Ensure branch of company exist
                        ii. Sort Task by branch of company
                        else :
                            sort Task by company  

                1. Allow management acess.
                    member_querySet = []
                    if param_leader == true :
                        from appName, staffMmeber, get all (user == leader)
                        for each staff as staffMeber :
                            mQuery = get Task(owner == staff.user)
                            append mQuery to member_querySet
                            return member_querySet

                                
                    if a leader get all subordinates provided you are not task.owner or assitant.

                1. for each task in Task:
                    a. if Task.status is not active:
                        i. if compeleted_by is USER:
                                ADD task data to lsit to be returned.
                        ii. if compeleted_by is not USER: 
                                exclude task data from list to be returned.
                        

            Important Instruction:
                1.  The changes should be made in the existing class/codes, preserving the original implementation structure. 
                2.  Provide complete updated files, preserving all existing logic and code that doesn't need modification. 
                        The changes should focus solely on fixing the reported requirements while retaining the original implementation.
                3.  Provide the complete updated files for my project:  
                        Each file should include existing code, along with modifications or additions due to the new requirements. 
                        Allowing for easy  Copy and paste of these files into my project to replace the existing ones.
                3. Ask if you need to review additional files that we might have to help you in updating the code




            Existing data:
                
                
                class TaskListCreateView(generics.ListCreateAPIView):
                    serializer_class = TaskSerializer
                    permission_classes = [IsAuthenticated]

                    def get_queryset(self):
                        """
                        Fetch tasks based on user, company, branch, status query parameters,
                        and annotate late task information if the user is an assistant.
                        Include tasks late by 2 days or more if the user is a branch staff.
                        """
                        user = self.request.user # Get the authenticated user
                        queryset = Task.objects.all() # Get all tasks

                        # Handle query parameters
                        all_param = self.request.query_params.get("all", "false").lower() == "true"
                        owner_param = self.request.query_params.get("owner", "false").lower() == "true"
                        assistant_param = self.request.query_params.get("assistant", "false").lower() == "true"
                        company_id = self.request.query_params.get("company")
                        branch_id = self.request.query_params.get("branch")
                        status_param = self.request.query_params.get("status")

                        if all_param:
                            # also check if user is a manager of the farm***.

                            if branch_id and not company_id:
                                raise ValidationError("'company' is required when 'branch' is provided.")

                            if company_id:
                                try:
                                    company = Company.objects.get(id=company_id)
                                except Company.DoesNotExist:
                                    raise ValidationError(f"Company with ID '{company_id}' does not exist.")

                                if not has_permission(user, company, app_name="bsf", model_name="Task", action="view"):
                                    raise PermissionDenied("You do not have permission to view tasks for this company.")

                                queryset = queryset.filter(company=company)

                                if branch_id:
                                    try:
                                        branch = Branch.objects.get(branch_id=branch_id)
                                    except Branch.DoesNotExist:
                                        raise ValidationError(f"Branch with ID '{branch_id}' does not exist.")

                                    if branch.company != company:
                                        raise ValidationError(f"Branch '{branch.name}' does not belong to Company '{company.name}'.")

                                    queryset = queryset.filter(branch=branch)
                    
                        elif owner_param:
                            # Get all tasks where the user is the owner
                            queryset = queryset.filter(owner=user)

                        elif assistant_param:
                            # Get all tasks where the user is the assistant
                            queryset = queryset.filter(assistant=user)
                        else:
                            # Get all tasks assigned to the user
                            queryset = queryset.filter(assigned_to=user)

                            # Get all late tasks where the user is an assistant
                            late_tasks = Task.objects.filter(
                                due_date__lt=now() - timedelta(days=1),
                                status="active",
                                assistant=user
                            )
                            queryset = queryset | late_tasks  # Combine the two querysets

                        
                        # Include extra tasks delayed by 2 or more days for branch staff
                        delayed_tasks = Task.objects.filter(
                            due_date__lt=now() - timedelta(days=2),
                            status="active"
                        )

                        for task in delayed_tasks:
                            appName = task.appName
                            # Check if the user is an active staff member of the branch
                            StaffMemberModel = apps.get_model(appName, 'StaffMember')
                            if StaffMemberModel.objects.filter(user=user, status="active", company=task.company).exists():
                                queryset = queryset | delayed_tasks 

                        # Filter by status
                        if status_param:
                            valid_status_choices = [choice[0] for choice in Task.STATUS_CHOICES]
                            if status_param not in valid_status_choices:
                                raise ValidationError({"status": f"Invalid status '{status_param}'. Valid options are: {', '.join(valid_status_choices)}."})
                            queryset = queryset.filter(status=status_param)

                        if company_id:
                                try:
                                    company = Company.objects.get(id=company_id)
                                except Company.DoesNotExist:
                                    raise ValidationError(f"Company with ID '{company_id}' does not exist.")
                                if not has_permission(user, company, app_name="bsf", model_name="Task", action="view"):
                                    raise PermissionDenied("You do not have permission to view tasks for this company.")
                                
                                
                                
                        return queryset

                    def perform_create(self, serializer):
                        serializer.save()

