import React, { useEffect, useState, useCallback, useMemo } from "react";
import {
  Box,
  Drawer,
  Divider,
  Typography,
  Button,
  Grid,
  Radio,
  RadioGroup,
  FormControl,
  FormControlLabel,
  CircularProgress,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tooltip,
  TableSortLabel,
} from "@mui/material";
import {
  Edit as EditIcon,
  Videocam as VideocamIcon,
  VideocamOff as VideocamOffIcon,
  PauseCircle as PauseCircleIcon,
  AddCircleOutline as AddCircleOutlineIcon,
} from "@mui/icons-material";

import { useDispatch, useSelector } from "react-redux";
import { AppDispatch, RootState } from "../../store";
import {
  fetchNetUseStats,
  selectNetUseStats,
  selectNetUseStatsLoading,
  selectNetUseStatsError,
} from "../../features/bsf/netUseStatsSlice";
import {
  fetchBsfPondsUseStats,
  selectBsfPondsUseStats,
  selectBsfPondsUseStatsStatus,
  selectBsfPondsUseStatsError,
} from "../../features/bsf/bsfPondsSlice";
import Carousel from "react-material-ui-carousel";
import { backendURL } from "../../utils/Constant";
import NetUseCreateForm from "./NetUseStatsForm";
import EditNetUseStats from "./EditNetUseStats";

interface BatchDetailsModalProps {
  open: boolean;
  batch: any | null;
  onClose: () => void;
  companyId: number;
  farmId: number;
}

interface MediaItem {
  id: number;
  file: string;
  title: string;
  fileType?: string;
}

const PondUseStatsDisplay: React.FC<{ harvest_stage: string; companyId: number; farmId: number; batchId: number }> = ({
  harvest_stage,
  companyId,
  farmId,
  batchId,
}) => {
  const dispatch = useDispatch<AppDispatch>();
  const pondUseStats = useSelector(selectBsfPondsUseStats);
  const status = useSelector(selectBsfPondsUseStatsStatus);
  const error = useSelector(selectBsfPondsUseStatsError);

  useEffect(() => {
    dispatch(fetchBsfPondsUseStats({ company: companyId, farm: farmId, batch: batchId, harvest_stage }));
  }, [dispatch, companyId, farmId, batchId, harvest_stage]);

  if (status === "loading") return <CircularProgress />;
  if (status === "failed") return <Alert severity="error">{error}</Alert>;

  return (
    <TableContainer>
      <Table>
        <TableHead>
          <TableRow>
            <TableCell>Pond Name</TableCell>
            <TableCell>Start Date</TableCell>
            <TableCell>Harvest Stage</TableCell>
            <TableCell>Status</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {pondUseStats.map((item) => (
            <TableRow key={item.pondusestats.id}>
              <TableCell>{item.pondusestats.pond_name}</TableCell>
              <TableCell>{item.pondusestats.start_date}</TableCell>
              <TableCell>{item.pondusestats.harvest_stage}</TableCell>
              <TableCell>{item.pondusestats.status}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

const BatchDetailsModal: React.FC<BatchDetailsModalProps> = ({
  open,
  batch,
  onClose,
  companyId,
  farmId,
}) => {
  const dispatch = useDispatch<AppDispatch>();

  const netUseStats = useSelector(selectNetUseStats);
  const loading = useSelector(selectNetUseStatsLoading);
  const error = useSelector(selectNetUseStatsError);

  const [selectedOption, setSelectedOption] = useState<string>("Laying");
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("asc");
  const [selectedNet, setSelectedNet] = useState<any | null>(null); // State for selected NetUseStats
  const [isCarouselPaused, setIsCarouselPaused] = useState<boolean>(false);
  const [showNetUseForm, setShowNetUseForm] = useState<boolean>(false); // State for Add button form
  const [editNetId, setEditNetId] = useState<number | null>(null); // State for Edit Net ID

  useEffect(() => {
    if (selectedOption === "Laying" && batch?.id) {
      dispatch(fetchNetUseStats({ companyId, farmId, batchId: batch.id }));
    }
  }, [selectedOption, batch, companyId, farmId, dispatch]);

  const handleRadioChange = useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      setSelectedOption(event.target.value);
    },
    []
  );

  const handleSortClick = useCallback(() => {
    setSortOrder((prev) => (prev === "asc" ? "desc" : "asc"));
  }, []);

  const handleRowClick = (net: any) => {
    setSelectedNet({
      ...net,
      associated_media: (net.associated_media || []).map(detectMediaType), // Enrich media
    });
    setShowNetUseForm(false); // Reset form display when selecting a new net
    setEditNetId(null); // Reset edit state when selecting a new net
  };

  const handleAddNewLayInfoClick = () => {
    setShowNetUseForm(true);
    setSelectedNet(null); // Reset selected net when showing the form
    setEditNetId(null); // Reset edit state
  };

  const handleEditClick = (netId: number, status: string) => {
    if (status !== "completed") {
      setEditNetId(netId); // Set the Net ID for editing
      setShowNetUseForm(false); // Reset form display
      setSelectedNet(null); // Reset selected net
    }
  };

  const detectMediaType = (media: MediaItem): MediaItem => {
    if (media.fileType) return media;

    const fileExtension = media.file.split(".").pop()?.toLowerCase();
    const typeMap: Record<string, string> = {
      mp4: "video",
      avi: "video",
      mov: "video",
      mp3: "audio",
      wav: "audio",
      jpg: "image",
      jpeg: "image",
      png: "image",
    };

    return {
      ...media,
      fileType: typeMap[fileExtension || ""] || "unknown",
    };
  };

  const sortedNetUseStats = useMemo(() => {
    return [...(netUseStats || [])].sort((a: any, b: any) => {
      if (a.stats === b.stats) return 0;
      if (a.stats === "ongoing" && b.stats !== "ongoing")
        return sortOrder === "asc" ? -1 : 1;
      if (a.stats !== "ongoing" && b.stats === "ongoing")
        return sortOrder === "asc" ? 1 : -1;
      return 0;
    });
  }, [netUseStats, sortOrder]);

  return (
    <Drawer anchor="right" open={open} onClose={onClose}>
      <Box sx={{ width: 600, padding: 2 }} role="presentation">
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography variant="h5" gutterBottom>
            {batch?.batch_name || "Batch Details"}
          </Typography>
          <Button variant="text" color="primary" onClick={onClose}>
            Close
          </Button>
        </Box>
        <Divider />
        <Grid container spacing={2} sx={{ mt: 2 }}>
          {/* Radio Buttons */}
          <Grid item xs={3} id="BatchInfoContainer">
            <FormControl component="fieldset">
              <RadioGroup value={selectedOption} onChange={handleRadioChange}>
                <FormControlLabel value="Laying" control={<Radio />} label="Laying" />
                <FormControlLabel value="Incubation" control={<Radio />} label="Incubation" />
                <FormControlLabel value="Nursery" control={<Radio />} label="Nursery" />
                <FormControlLabel value="Growout" control={<Radio />} label="Grow Out" />
                <FormControlLabel value="PrePupa" control={<Radio />} label="PrePupa" />
                <FormControlLabel value="Pupa" control={<Radio />} label="Pupa" />
              </RadioGroup>
              {/* Add Button */}
              <Box sx={{ mt: 2, textAlign: "center" }}>
                <Tooltip title="Add new laying data for this batch">
                  <Button
                    id="addNewLayInfoButton"
                    variant="contained"
                    color="primary"
                    startIcon={<AddCircleOutlineIcon />}
                    onClick={handleAddNewLayInfoClick}
                  >
                    Add
                  </Button>
                </Tooltip>
              </Box>
            </FormControl>
          </Grid>

          {/* NetUseStatsTableContainer */}
          <Grid item xs={9} id="NetUseStatsTableContainer">
            {selectedOption !== "Laying" ? (
              <PondUseStatsDisplay
                harvest_stage={selectedOption}
                companyId={companyId}
                farmId={farmId}
                batchId={batch?.id}
              />
            ) : loading ? (
              <CircularProgress />
            ) : error ? (
              <Alert severity="error">{error}</Alert>
            ) : (
              <TableContainer
                sx={{
                  maxHeight: 250,
                  overflowY: "auto",
                }}
              >
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Net Name</TableCell>
                      <TableCell>Status</TableCell>
                      <TableCell>Associated</TableCell>
                      <TableCell>Edit</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {sortedNetUseStats.map((net: any) => (
                      <TableRow
                        key={net.id}
                        sx={{
                          backgroundColor:
                            selectedNet?.id === net.id ? "#f0f8ff" : "inherit",
                          cursor: "pointer",
                        }}
                      >
                        <TableCell onClick={() => handleRowClick(net)}>
                          {net.associated_net?.name || `Net ${net.id}`}
                        </TableCell>
                        <TableCell onClick={() => handleRowClick(net)}>
                          {net.stats}
                        </TableCell>
                        <TableCell onClick={() => handleRowClick(net)}>
                          {net.associated_media?.length > 0 ? (
                            <VideocamIcon sx={{ fontSize: 20, color: "green" }} />
                          ) : (
                            <VideocamOffIcon sx={{ fontSize: 20, color: "gray" }} />
                          )}
                        </TableCell>
                        <TableCell>
                          <Tooltip
                            title={
                              net.stats === "completed"
                                ? "Edit disabled for completed status"
                                : "Edit Net Use"
                            }
                          >
                            <EditIcon
                              sx={{
                                fontSize: 20,
                                color:
                                  net.stats === "completed" ? "gray" : "blue",
                                cursor:
                                  net.stats === "completed" ? "default" : "pointer",
                              }}
                              onClick={() => handleEditClick(net.id, net.stats)}
                            />
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </Grid>
        </Grid>
        <Divider sx={{ mt: 2, mb: 2 }} />

        {/* AssociatedMediaContainer */}
        <Box
          id="AssociatedMediaContainer"
          sx={{
            mt: 2,
            p: 2,
            border: "1px solid #ccc",
            borderRadius: 4,
            backgroundColor: "#f9f9f9",
          }}
        >
          {showNetUseForm ? (
            <NetUseCreateForm
              companyId={companyId}
              farmId={farmId}
              batchId={batch?.id}
            />
          ) : editNetId !== null ? (
            <EditNetUseStats
              id={editNetId}
              companyId={companyId}
              farmId={farmId}
              batchId={batch?.id}
            />
          ) : selectedNet ? (
            <>
              <Typography variant="h6">Net Details</Typography>
              <Box display="flex" justifyContent="space-between" mb={2}>
                <Typography>
                  <strong>Lay Start:</strong> {new Date(selectedNet.lay_start).toDateString()}
                </Typography>
                <Typography>
                  <strong>Lay End:</strong> {new Date(selectedNet.lay_end).toDateString()}
                </Typography>
              </Box>
              <Typography>
                <strong>Harvest Weight:</strong> {selectedNet.harvest_weight} g
              </Typography>

              {/* Media Section */}
              {selectedNet.associated_media?.length > 0 ? (
                <>
                  <Divider sx={{ my: 2 }} />
                  <Box>
                    <Typography variant="h6">Associated Media</Typography>
                    <Carousel autoPlay={!isCarouselPaused}>
                      {selectedNet.associated_media.map((media: MediaItem) => (
                        <MediaDisplay key={media.id} media={media} />
                      ))}
                    </Carousel>
                  </Box>
                </>
              ) : (
                <Typography sx={{ mt: 2 }}>No media associated with this net.</Typography>
              )}
            </>
          ) : (
            <Typography>No Net selected. Click a row to view details.</Typography>
          )}
        </Box>
      </Box>
    </Drawer>
  );
};

const MediaDisplay: React.FC<{ media: MediaItem }> = ({ media }) => {
  const mediaUrl = `${backendURL}${media.file}`;

  switch (media.fileType) {
    case "video":
      return (
        <video
          src={mediaUrl}
          controls
          style={{ maxHeight: "300px", width: "100%" }}
        />
      );
    case "audio":
      return (
        <audio
          src={mediaUrl}
          controls
          style={{ width: "100%" }}
        />
      );
    case "image":
      return (
        <img
          src={mediaUrl}
          alt={media.title}
          style={{ maxHeight: "300px", width: "100%" }}
        />
      );
    default:
      return <Typography>Unsupported media type</Typography>;
  }
};

export default BatchDetailsModal;
