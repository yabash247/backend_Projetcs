# Generated by Django 5.1.3 on 2025-02-19 04:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('company', '0050_alter_activityowner_reoccurring_end_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('species', models.CharField(max_length=255)),
                ('source', models.CharField(help_text='Hatchery or supplier', max_length=255)),
                ('stocking_date', models.DateField()),
                ('initial_quantity', models.PositiveIntegerField()),
                ('initial_avg_weight', models.DecimalField(decimal_places=2, help_text='Initial weight in grams', max_digits=5)),
                ('status', models.CharField(choices=[('Stocked', 'Stocked'), ('Harvested', 'Harvested')], default='Stocked', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='BenefactorItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('contact', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FeedInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_type', models.CharField(max_length=255)),
                ('quantity_in_kg', models.DecimalField(decimal_places=2, max_digits=10)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(max_length=50, unique=True)),
                ('issued_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateField()),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Paid', 'Paid')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='MarketPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=255)),
                ('recorded_at', models.DateField()),
                ('fish_per_kg', models.PositiveIntegerField(help_text='Number of fish making up 1 kg')),
                ('price_per_kg', models.DecimalField(decimal_places=2, help_text='Price for 1 kg of fish at this size category', max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='CCTVItem',
            fields=[
                ('benefactoritem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='catFishFarm.benefactoritem')),
                ('brand', models.CharField(max_length=255)),
                ('resolution', models.CharField(help_text='Resolution (e.g., 1080p, 4K)', max_length=50)),
                ('storage_capacity', models.CharField(help_text='Storage capacity in TB', max_length=50)),
            ],
            bases=('catFishFarm.benefactoritem',),
        ),
        migrations.CreateModel(
            name='DogItem',
            fields=[
                ('benefactoritem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='catFishFarm.benefactoritem')),
                ('breed', models.CharField(max_length=255)),
                ('age', models.PositiveIntegerField(help_text='Age in years')),
                ('vaccinated', models.BooleanField(default=False)),
                ('health_status', models.TextField(blank=True, null=True)),
            ],
            bases=('catFishFarm.benefactoritem',),
        ),
        migrations.CreateModel(
            name='GeneratorItem',
            fields=[
                ('benefactoritem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='catFishFarm.benefactoritem')),
                ('brand', models.CharField(max_length=255)),
                ('power_output', models.CharField(help_text='Power output (e.g., 5kVA)', max_length=50)),
                ('fuel_type', models.CharField(choices=[('Diesel', 'Diesel'), ('Petrol', 'Petrol')], max_length=50)),
            ],
            bases=('catFishFarm.benefactoritem',),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='catFishFarm.category')),
            ],
        ),
        migrations.AddField(
            model_name='benefactoritem',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='benefactor_items', to='catFishFarm.category'),
        ),
        migrations.CreateModel(
            name='ContractorVendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('contact', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('services', models.TextField(blank=True, help_text='Services provided by the vendor (e.g., logistics, maintenance)', null=True)),
                ('rating', models.DecimalField(blank=True, decimal_places=2, help_text='Vendor rating out of 5', max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_items', models.ManyToManyField(blank=True, related_name='vendors', to='catFishFarm.benefactoritem')),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total expense amount', max_digits=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='catFishFarm.category')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage_share', models.DecimalField(decimal_places=2, help_text='Percentage of expense allocated', max_digits=5)),
                ('benefactor_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expense_allocations', to='catFishFarm.benefactoritem')),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='catFishFarm.expense')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseBreakdown',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payee_type', models.CharField(choices=[('Vendor', 'Vendor'), ('Staff', 'Staff'), ('Agent', 'Agent')], max_length=20)),
                ('description', models.CharField(help_text='Purpose of this breakdown (e.g., Delivery fee, Logistics)', max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount for this particular breakdown', max_digits=10)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='breakdowns', to='catFishFarm.expense')),
                ('payee_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff_expense_payments', to='company.staff')),
                ('payee_vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expense_payments', to='catFishFarm.contractorvendor')),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('location', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='catfish_farms', to='company.company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='expense',
            name='farm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='catFishFarm.farm'),
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(help_text='Type of alert (e.g., Task Missed, Abnormal Feeding, High Mortality)', max_length=255)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='catFishFarm.farm')),
            ],
        ),
        migrations.CreateModel(
            name='AIInsights',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(help_text='Type of AI insight (e.g., Growth Prediction, Health Risk, Profit Forecast)', max_length=255)),
                ('insight_details', models.TextField()),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_insights', to='catFishFarm.farm')),
            ],
        ),
        migrations.CreateModel(
            name='FarmOwnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ownership_percentage', models.DecimalField(decimal_places=2, help_text='Ownership percentage', max_digits=5)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owners', to='catFishFarm.farm')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FeedStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_type', models.CharField(max_length=255)),
                ('feed_size', models.CharField(choices=[('0.1mm', '0.1mm'), ('0.2mm', '0.2mm'), ('0.5mm', '0.5mm'), ('0.8mm', '0.8mm'), ('1mm', '1mm'), ('1.5mm', '1.5mm'), ('2mm', '2mm'), ('4mm', '4mm'), ('6mm', '6mm'), ('9mm', '9mm'), ('others', 'Others')], default='others', help_text='Size of feed in stock', max_length=10)),
                ('initial_quantity', models.DecimalField(decimal_places=2, help_text='Total quantity purchased', max_digits=10)),
                ('quantity_in_kg', models.DecimalField(decimal_places=2, help_text='Current available quantity', max_digits=10)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date of the feed (if applicable)', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feed_stock', to='catFishFarm.farm')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feed_supplies', to='catFishFarm.contractorvendor')),
            ],
        ),
        migrations.CreateModel(
            name='IoTData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(help_text='Stores multiple sensor readings like temperature, pH, ammonia')),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='iot_data', to='catFishFarm.farm')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('Cash', 'Cash'), ('Bank Transfer', 'Bank Transfer'), ('Mobile Payment', 'Mobile Payment')], max_length=50)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='catFishFarm.invoice')),
            ],
        ),
        migrations.CreateModel(
            name='Pond',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depth', models.DecimalField(decimal_places=2, help_text='Depth in meters', max_digits=10)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('Earthen', 'Earthen'), ('Concrete', 'Concrete'), ('Tarpaulin', 'Tarpaulin')], max_length=20)),
                ('size', models.DecimalField(decimal_places=2, help_text='Size in square meters', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ponds', to='catFishFarm.farm')),
            ],
        ),
        migrations.CreateModel(
            name='MortalityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_at', models.DateField()),
                ('quantity', models.PositiveIntegerField()),
                ('cause', models.CharField(max_length=255)),
                ('corrective_action', models.TextField(blank=True, null=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mortality_logs', to='catFishFarm.batch')),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mortality_logs', to='catFishFarm.pond')),
            ],
        ),
        migrations.CreateModel(
            name='HealthLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('symptoms', models.TextField()),
                ('treatment', models.TextField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, help_text='Date when health issue was resolved', null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Resolved', 'Resolved')], default='Pending', max_length=20)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_logs', to='catFishFarm.pond')),
            ],
        ),
        migrations.CreateModel(
            name='FishGrowth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='Start date of the growth tracking period')),
                ('end_date', models.DateField(help_text='End date of the growth tracking period')),
                ('total_feed_bags', models.DecimalField(decimal_places=2, help_text='Total feed bags consumed during the period', max_digits=10)),
                ('weight_before', models.DecimalField(decimal_places=2, help_text='Weight per fish at start in grams', max_digits=10)),
                ('weight_after', models.DecimalField(decimal_places=2, help_text='Weight per fish at end in grams', max_digits=10)),
                ('fcr', models.DecimalField(decimal_places=2, help_text='Feed Conversion Ratio (FCR)', max_digits=5)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='growth_records', to='catFishFarm.pond')),
            ],
        ),
        migrations.CreateModel(
            name='FeedConsumption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('feed_type', models.CharField(max_length=255)),
                ('feed_size', models.CharField(choices=[('0.1mm', '0.1mm'), ('0.2mm', '0.2mm'), ('0.5mm', '0.5mm'), ('0.8mm', '0.8mm'), ('1mm', '1mm'), ('1.5mm', '1.5mm'), ('2mm', '2mm'), ('4mm', '4mm'), ('6mm', '6mm'), ('9mm', '9mm'), ('others', 'Others')], default='others', help_text='Size of feed used', max_length=10)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feed_consumption', to='catFishFarm.farm')),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feed_consumption', to='catFishFarm.pond')),
            ],
        ),
        migrations.CreateModel(
            name='DestockingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('weight', models.DecimalField(decimal_places=2, help_text='Total weight removed', max_digits=10)),
                ('reason', models.CharField(choices=[('Sale', 'Sale'), ('Sorting', 'Sorting')], help_text='Reason for destocking', max_length=255)),
                ('destocked_at', models.DateField()),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='destocking_history', to='catFishFarm.batch')),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='destocking_history', to='catFishFarm.pond')),
            ],
        ),
        migrations.CreateModel(
            name='BatchMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moved_on', models.DateField()),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='catFishFarm.batch')),
                ('from_pond', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='batch_moved_out', to='catFishFarm.pond')),
                ('to_pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_moved_in', to='catFishFarm.pond')),
            ],
        ),
        migrations.CreateModel(
            name='PondCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, help_text='Temperature in Celsius', max_digits=5, null=True)),
                ('ph_level', models.DecimalField(blank=True, decimal_places=2, help_text='pH level', max_digits=4, null=True)),
                ('ammonia_level', models.DecimalField(blank=True, decimal_places=2, help_text='Ammonia concentration', max_digits=5, null=True)),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='catFishFarm.pond')),
            ],
        ),
        migrations.CreateModel(
            name='ProfitAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_at', models.DateField()),
                ('total_revenue', models.DecimalField(decimal_places=2, max_digits=15)),
                ('total_expenses', models.DecimalField(decimal_places=2, max_digits=15)),
                ('profit_or_loss', models.DecimalField(decimal_places=2, help_text='Positive for profit, negative for loss', max_digits=15)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profit_analysis', to='catFishFarm.farm')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(help_text='Type of report (e.g., Weekly Summary, Monthly Profit Analysis)', max_length=255)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(help_text='Report details')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='catFishFarm.farm')),
            ],
        ),
        migrations.CreateModel(
            name='Sales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit sold', max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price (calculated automatically)', max_digits=10)),
                ('sale_date', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='catFishFarm.batch')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='catFishFarm.customer')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='catFishFarm.farm')),
            ],
        ),
        migrations.AddField(
            model_name='invoice',
            name='sales',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='catFishFarm.sales'),
        ),
        migrations.CreateModel(
            name='StaffTaskAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(max_length=255)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('completed', models.BooleanField(default=False)),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_tasks', to='company.staff')),
            ],
        ),
        migrations.CreateModel(
            name='StockingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stocked_at', models.DateField()),
                ('quantity', models.PositiveIntegerField()),
                ('weight', models.DecimalField(decimal_places=2, help_text='Total weight stocked', max_digits=10)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocking_history', to='catFishFarm.batch')),
                ('pond', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocking_history', to='catFishFarm.pond')),
            ],
        ),
        migrations.CreateModel(
            name='TaskChecklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.CharField(max_length=255)),
                ('is_completed', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checklist', to='company.task')),
            ],
        ),
    ]
