



Update FarmDetail : 
    1. Add a modal that on click opens StaffMemberList : <Route path="/staff-members/:appName/:companyId/:farmId/:userId?" element={<StaffMemberList />}/>
        include 

Important Instruction:
    1.The changes should be made in the same class, preserving the original implementation structure.


Exisiting data:
        
import React, { useEffect } from "react";
    import { useSelector, useDispatch } from "react-redux";
    import { fetchFarmDetails, clearError } from "../../../features/company/BSF/farmSlice";
    import { RootState, AppDispatch } from "../../../store";
    import {
    Box,
    Typography,
    Card,
    CardMedia,
    CardContent,
    CircularProgress,
    Alert,
    } from "@mui/material";

    interface FarmDetailProps {
    companyId: number;
    farmId: number;
    appName: string;
    }

    const FarmDetail: React.FC<FarmDetailProps> = ({ companyId, farmId, appName }) => {
    const dispatch = useDispatch<AppDispatch>();
    const { farm, loading, error } = useSelector((state: RootState) => state.bsffarm);
    const accessToken = useSelector((state: RootState) => state.auth.accessToken);

    useEffect(() => {
        if (accessToken) {
        dispatch(fetchFarmDetails({ accessToken, companyId, farmId, appName }));
        }

        return () => {
        dispatch(clearError());
        };
    }, [dispatch, accessToken, companyId, farmId]);

    if (loading) return <CircularProgress />;
    if (error) return <Alert severity="error">{error}</Alert>;

    return (
        <Box sx={{ p: 3 }}>
        {farm && (
            <Card>
            <CardMedia
                component="img"
                height="200"
                image={farm.background_image}
                alt={farm.name}
            />
            <CardContent>
                <Typography variant="h4" component="div">
                {farm.name}
                </Typography>
                <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
                {farm.description}
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                Status: {farm.status}
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                Established Date: {new Date(farm.established_date).toLocaleDateString()}
                </Typography>
                <Typography variant="h6" sx={{ mt: 2 }}>
                Associated Company
                </Typography>
                <Typography variant="body2" color="text.secondary">
                Name: {farm.associated_company.name}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                Address: {farm.associated_company.address}
                </Typography>
            </CardContent>
            </Card>
        )}
        </Box>
    );
    };

    export default FarmDetail;

import React, { useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import {
  fetchStaffMembers,
  selectStaffMembers,
  selectStaffMemberLoading,
  selectStaffMemberError,
} from '../../features/company/staffMemberSlice';
import { RootState } from '../../store';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  CircularProgress,
  Typography,
  Alert,
} from '@mui/material';

const StaffMemberList: React.FC = () => {
  const { appName, companyId, farmId, userId } = useParams<{
    appName: string;
    companyId: string;
    farmId: string;
    userId?: string;
  }>();
  const dispatch = useDispatch();
  const staffMembers = useSelector((state: RootState) => state.staffMember.staffMembers);
  const loading = useSelector((state: RootState) => state.staffMember.loading);
  const error = useSelector((state: RootState) => state.staffMember.error);

  useEffect(() => {
    if (appName && companyId && farmId) {
      dispatch(
        fetchStaffMembers({
          appName,
          companyId: parseInt(companyId, 10),
          farmId: parseInt(farmId, 10),
          userId: userId ? parseInt(userId, 10) : undefined,
        }) as any
      );
    }
  }, [dispatch, appName, companyId, farmId, userId]);

  // Ensure staffMembers is an array before mapping
  if (!Array.isArray(staffMembers)) {
    return <Typography variant="body1" align="center">Invalid staff members data.</Typography>;
  }
  

  return (
    <TableContainer component={Paper}>
      <Typography variant="h6" align="center" gutterBottom>
        Staff Members for {appName}
      </Typography>
      {loading && <CircularProgress />}
      {error && <Alert severity="error">{error}</Alert>}
      {!loading && !error && staffMembers.length === 0 && (
        <Typography variant="body1" align="center">
          No staff members found.
        </Typography>
      )}
      {!loading && !error && staffMembers.length > 0 && (
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>User</TableCell>
              <TableCell>Position</TableCell>
              <TableCell>Status</TableCell>
              <TableCell>Level</TableCell>
              <TableCell>Assigned At</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {staffMembers.map((staff) => (
              <TableRow key={staff.id}>
                <TableCell>{staff.user}</TableCell>
                <TableCell>{staff.position}</TableCell>
                <TableCell>{staff.status}</TableCell>
                <TableCell>{staff.level}</TableCell>
                <TableCell>{new Date(staff.assigned_at).toLocaleString()}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </TableContainer>
  );
};

export default StaffMemberList;

